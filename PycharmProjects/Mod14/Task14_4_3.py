"""
   Напишите декоратор, который будет сохранять результаты выполнения декорируемой функции в словаре.
   Словарь должен находиться в nonlocal области в следующем формате: по ключу располагается аргумент
   функции, по значению результат работы функции, например, {n: f(n)}.

   И при повторном вызове функции будет брать значение из словаря, а не вычислять заново. То есть словарь можно
   считать промежуточной памятью на время работы программы, где будут храниться ранее вычисленные значения.
   Исходная функция, которую нужно задекорировать имеет следующий вид и выполняет простое умножение на число 123456789:

   def f(n):
       return n * 123456789
"""


def decor_cache(fn):
    dict_ = {}

    def wrapper(num):
        nonlocal dict_
        if num not in dict_:
           dict_[num] = fn(num)
           print(f"Добавление результата в кэш: {dict_[num]}")
        else:
           print(f"Возвращение результата из кэша: {dict_[num]}")
        print(f"Кэш {dict_}")

        return dict_

    return wrapper

@decor_cache
def f(n):
    return n * 123456789

f(10)
f(5)
f(17)
